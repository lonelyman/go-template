package main

import (
	"errors"
	"flag"
	"fmt"
	"log"

	"github.com/golang-migrate/migrate/v4"
	_ "github.com/golang-migrate/migrate/v4/database/postgres" // Driver ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PostgreSQL
	_ "github.com/golang-migrate/migrate/v4/source/file"       // Driver ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
	"github.com/joho/godotenv"

	"go-template/pkg/config" // Import config loader ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
)

func main() {
	// 1. ‡πÇ‡∏´‡∏•‡∏î .env ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Local Development
	// ‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡πÉ‡∏ô Docker Compose, env var ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏â‡∏µ‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
	if err := godotenv.Load(); err != nil {
		log.Println("Info: No .env file found, using OS environment variables")
	}

	// 2. ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å Command Line (Flags)
	var dbName, migrationPath, action string
	flag.StringVar(&dbName, "db", "", "Name of the database to migrate (e.g., primary, logs)")
	flag.StringVar(&migrationPath, "path", "", "Path to the migration files (e.g., db/migrations/primary)")
	flag.StringVar(&action, "action", "up", "Migration action: up or down")
	flag.Parse()

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà Flag ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if dbName == "" || migrationPath == "" {
		log.Fatalf("‚ùå Both --db and --path flags are required! Usage: go run ./cmd/migrate/main.go --db=<name> --path=<path>")
	}

	log.Printf("üöÄ Starting migration for database: '%s' | Action: '%s'", dbName, action)

	// 3. ‡πÇ‡∏´‡∏•‡∏î Configuration
	cfg, err := config.LoadConfig()
	if err != nil {
		log.Fatalf("‚ùå Could not load config: %v", err)
	}

	// 4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Connection String (DSN) ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° Flag ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤
	var dsn string
	switch dbName {
	case "primary":
		dsn = cfg.Postgres.Primary.BuildDSN()
	case "logs":
		dsn = cfg.Postgres.Logs.BuildDSN()
	// ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏ñ‡πâ‡∏≤‡∏°‡∏µ DB ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Å‡πá‡∏°‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° case ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
	default:
		log.Fatalf("‚ùå Unknown database name: '%s'. Must be one of 'primary', 'logs'", dbName)
	}

	log.Printf("üìÅ Using migration files from: '%s'", migrationPath)

	// 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á migrate
	// ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏ß‡πà‡∏≤ path ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ file://
	m, err := migrate.New(fmt.Sprintf("file://%s", migrationPath), dsn)
	if err != nil {
		log.Fatalf("‚ùå Failed to create migrate instance: %v", err)
	}

	// 6. ‡∏£‡∏±‡∏ô Action ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤
	var migrationErr error
	switch action {
	case "up":
		migrationErr = m.Up()
	case "down":
		// ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ 1 step
		migrationErr = m.Steps(-1)
	default:
		log.Fatalf("‚ùå Unknown action: '%s'. Must be 'up' or 'down'", action)
	}

	// 7. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
	if migrationErr != nil && !errors.Is(migrationErr, migrate.ErrNoChange) {
		log.Fatalf("‚ùå Failed to apply migrations: %v", migrationErr)
	}

	if errors.Is(migrationErr, migrate.ErrNoChange) {
		log.Println("‚úÖ No new migrations to apply.")
	} else {
		log.Println("‚úÖ Database migration completed successfully!")
	}
}
