package main

import (
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/gofiber/fiber/v2"
	"github.com/joho/godotenv"

	"go-template/internal/adapters/primary/http/handlers"
	"go-template/internal/adapters/primary/http/middleware"
	"go-template/internal/modules/example_module"
	"go-template/pkg/config"
	postgres "go-template/pkg/platform/postgres"
)

func main() {
	// 0. ‡πÇ‡∏´‡∏•‡∏î Environment Variables
	if os.Getenv("DOCKER_ENV") != "true" {
		if err := godotenv.Load(); err != nil {
			log.Println("Warning: .env file not found")
		}
	}

	// 1. ‡πÇ‡∏´‡∏•‡∏î Configuration
	cfg, err := config.LoadConfig()
	if err != nil {
		log.Fatalf("failed to load configuration: %v", err)
	}

	// 2. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô (Primary Database - Required)
	primaryDB, err := postgres.NewConnection(cfg.Database)
	if err != nil {
		log.Fatalf("Failed to connect to primary database: %v", err)
	}
	log.Println("‚úÖ Primary database connected")

	// 3. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Analytics Database (Optional)
	analyticsDB, err := postgres.InitPostgresWithName("ANALYTICS")
	if err != nil {
		log.Printf("‚ö†Ô∏è Analytics database not available: %v", err)
		analyticsDB = nil // ‡πÉ‡∏ä‡πâ nil ‡πÅ‡∏ó‡∏ô
	} else {
		log.Println("‚úÖ Analytics database connected")
	}

	// 4. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Logs Database (Optional)
	logsDB, err := postgres.InitPostgresWithName("LOGS")
	if err != nil {
		log.Printf("‚ö†Ô∏è Logs database not available: %v", err)
		logsDB = nil // ‡πÉ‡∏ä‡πâ nil ‡πÅ‡∏ó‡∏ô
	} else {
		log.Println("‚úÖ Logs database connected")
	}

	// 5. ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏£‡πà‡∏≤‡∏á Modules (Dependency Injection)
	exampleRepo := example_module.NewExampleRepository(primaryDB)
	exampleService := example_module.NewExampleService(exampleRepo)
	exampleHandler := example_module.NewExampleHandler(exampleService)

	// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô multiple databases
	_ = analyticsDB // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô unused variable
	_ = logsDB      // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô unused variable

	// Health handler
	healthHandler := handlers.NewHealthHandler()

	// 4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Web Server (Fiber)
	app := fiber.New(fiber.Config{
		AppName: fmt.Sprintf("%s %s", cfg.App.Name, cfg.App.Version),
	})

	app.Use(middleware.Logger())
	app.Use(middleware.CORS())

	// Register health routes
	healthHandler.RegisterRoutes(app)

	// --- ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Routes ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Module (‡πÅ‡∏ö‡∏ö Modular) --- ‚ú®
	apiV1 := app.Group("/api/v1")

	// Register example module routes
	exampleHandler.RegisterRoutes(apiV1)

	// 5. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Server (Start & Graceful Shutdown)
	go func() {
		listenAddr := fmt.Sprintf(":%s", cfg.Server.Port)
		log.Printf("üöÄ Server starting on port %s", cfg.Server.Port)
		if err := app.Listen(listenAddr); err != nil {
			log.Fatalf("server failed to start: %v", err)
		}
	}()

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	<-quit
	log.Println("üõë Shutting down server...")

	if err := app.Shutdown(); err != nil { // ‚ú® ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Fiber v2
		log.Fatalf("server shutdown failed: %v", err)
	}

	log.Println("‚úÖ Server gracefully stopped")
}
