// pkg/logger/pretty_logger.go
package logger

import (
	"encoding/json"
	"fmt"
	"log"
	"runtime"
	"strings"
)

// ANSI Color Codes (Bright versions)
const (
	ColorReset  = "\033[0m"
	ColorRed    = "\033[91m"
	ColorGreen  = "\033[92m"
	ColorYellow = "\033[93m"
	ColorBlue   = "\033[94m"
	ColorCyan   = "\033[96m"
	ColorPurple = "\033[95m"
)

type prettyLogger struct{}

func NewPrettyLogger() Logger {
	return &prettyLogger{}
}

// ‚ú® ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î getFileInfo ‡πÉ‡∏´‡πâ‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
// ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏´‡∏≤ Caller ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å package 'logger' ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
func getFileInfo() string {
	for i := 2; i < 15; i++ {
		_, file, line, ok := runtime.Caller(i)
		if !ok {
			break
		}
		// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô package logger ‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏£‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÜ!
		if !strings.Contains(file, "pkg/logger") {
			parts := strings.Split(file, "/")
			return fmt.Sprintf("%s:%d", parts[len(parts)-1], line)
		}
	}
	return "???:0"
}

// ‚ú® ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à key-value pairs ‡πÅ‡∏ö‡∏ö slog
func formatArgs(args ...any) string {
	if len(args) == 0 {
		return ""
	}
	var builder strings.Builder
	builder.WriteString(" |") // ‡πÉ‡∏ä‡πâ | ‡∏Ñ‡∏±‡πà‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á message ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏±‡∏ö args

	for i := 0; i < len(args); i += 2 {
		key := args[i]
		var value any = "(MISSING)"
		if i+1 < len(args) {
			value = args[i+1]
		}
		builder.WriteString(fmt.Sprintf(" %s=%v", key, value))
	}
	return builder.String()
}

func (l *prettyLogger) Debug(msg string, args ...any) {
	location := getFileInfo()
	formattedArgs := formatArgs(args...)
	log.Printf("%süêõ DEBUG %s: %s%s%s", ColorBlue, location, msg, formattedArgs, ColorReset)
}

func (l *prettyLogger) Info(msg string, args ...any) {
	location := getFileInfo()
	formattedArgs := formatArgs(args...)
	log.Printf("%s‚ÑπÔ∏è  INFO  %s: %s%s%s", ColorCyan, location, msg, formattedArgs, ColorReset)
}

func (l *prettyLogger) Success(msg string, args ...any) {
	location := getFileInfo()
	formattedArgs := formatArgs(args...)
	log.Printf("%s‚úÖ SUCCESS %s: %s%s%s", ColorGreen, location, msg, formattedArgs, ColorReset)
}

func (l *prettyLogger) Warn(msg string, args ...any) {
	location := getFileInfo()
	formattedArgs := formatArgs(args...)
	log.Printf("%s‚ö†Ô∏è  WARN  %s: %s%s%s", ColorYellow, location, msg, formattedArgs, ColorReset)
}

func (l *prettyLogger) Error(msg string, err error, args ...any) {
	location := getFileInfo()
	// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Error ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° field 'err' ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô args ‡∏î‡πâ‡∏ß‡∏¢
	allArgs := append(args, "err", err)
	formattedArgs := formatArgs(allArgs...)
	log.Printf("%s‚ùå ERROR %s: %s%s%s", ColorRed, location, msg, formattedArgs, ColorReset)
}

func (l *prettyLogger) Print(msg string) {
	location := getFileInfo()
	// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏ï‡∏≤‡∏° Level
	color := ColorPurple
	log.Printf("%süîç Print  %s: %s\n%s%s", color, location, msg, ColorReset)
}

func (l *prettyLogger) Dump(data interface{}) {
	location := getFileInfo()
	// ‡πÅ‡∏õ‡∏•‡∏á object ‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏™‡∏ß‡∏¢‡πÜ
	jsonBytes, err := json.MarshalIndent(data, "", "  ")
	if err != nil {
		l.Error("Failed to dump data", err)
		return
	}
	color := ColorPurple

	log.Printf("%süîç DUMP  %s: %s\n%s%s", color, location, string(jsonBytes), ColorReset)
}

func (l *prettyLogger) Dumpf(level string, msg string, data interface{}) {
	location := getFileInfo()

	// ‡πÅ‡∏õ‡∏•‡∏á object ‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏™‡∏ß‡∏¢‡πÜ
	jsonBytes, err := json.MarshalIndent(data, "", "  ")
	if err != nil {
		l.Error("Failed to dump data", err)
		return
	}
	// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏ï‡∏≤‡∏° Level
	color := ColorPurple
	switch strings.ToUpper(level) {
	case LevelDebug:
		color = ColorBlue
	case LevelInfo:
		color = ColorCyan
	case LevelWarn:
		color = ColorYellow
	case LevelError:
		color = ColorRed
	case LevelSuccess:
		color = ColorGreen
	}
	log.Printf("%süîç DUMP_F  %s: %s\n%s%s", color, location, msg, string(jsonBytes), ColorReset)
}
