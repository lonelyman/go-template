package example_module

import (
	"go-template/pkg/custom_errors"
	"go-template/pkg/response"
	"time"

	"github.com/gofiber/fiber/v3"
)

// ====================================================================================
// API Data Transfer Objects (DTOs)
// - Structs ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÇ‡∏•‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (JSON, URI)
// - ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Handler ‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
// ====================================================================================

type CreateExampleRequest struct {
	Name  string `json:"name" binding:"required"`
	Email string `json:"email" binding:"required,email"`
}

type GetExampleByIDParams struct {
	ID uint `uri:"id" validate:"required,gte=1"` // gte=1 ‡∏Ñ‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 1
}

type UpdateExampleByIDParams struct {
	ID uint `uri:"id" validate:"required,gte=1"` // gte=1 ‡∏Ñ‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 1
}

type UpdateExampleRequest struct {
	Name   *string `json:"name,omitempty"`
	Email  *string `json:"email,omitempty"`
	Status *string `json:"status,omitempty"`
}

type DeleteExampleByIDParams struct {
	ID uint `uri:"id" validate:"required,gte=1"` // gte=1 ‡∏Ñ‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 1
}

type ExampleResponse struct {
	ID        uint      `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	Status    string    `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// ExampleHandler handles HTTP requests for examples
type ExampleHandler struct {
	service ExampleService
}

// NewExampleHandler creates a new instance of ExampleHandler
func NewExampleHandler(service ExampleService) *ExampleHandler {
	return &ExampleHandler{service: service}
}

// CreateExample handles POST /examples - Auto-reload TEST! üöÄ
func (h *ExampleHandler) CreateExample(c fiber.Ctx) error {
	var req CreateExampleRequest
	if err := c.Bind().Body(&req); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": err.Error()})
	}
	// error_message,err := validator.ValidateStructDetails(req)
	// if err != nil {
	// 	return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": err.Error()})
	// }
	exampleDomain := ExampleDomain{
		Name:  req.Name,
		Email: req.Email,
	}
	resp, err := h.service.CreateExample(exampleDomain)
	if err != nil {
		return response.Error(c, err.(*custom_errors.AppError))
	}
	return response.Success(c, fiber.StatusCreated, resp)
}

/*
// GetExample handles GET /examples/:id
func (h *ExampleHandler) GetExampleByID(c fiber.Ctx) error {
	// 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á struct ‡∏°‡∏≤‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤
	params := new(GetExampleByIDParams)

	// 2. ‚≠êÔ∏è ‡πÉ‡∏ä‡πâ c.Bind().URI() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤! ‚≠êÔ∏è
	if err := c.Bind().URI(params); err != nil {
		// Error ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ñ‡πâ‡∏≤ user ‡∏™‡πà‡∏á string ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
		appErr := custom_errors.ValidationError("ID ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", fiber.Map{
			"id": "must be a positive integer",
		})
		return response.Error(c, appErr)
	}

	domainObject, err := h.service.GetExample(params.ID)
	if err != nil {
		return response.Error(c, err.(*custom_errors.AppError))
	}
	responsePayload := toExampleResponse(domainObject)
	return response.Success(c, fiber.StatusOK, responsePayload)
}

// UpdateExample handles PUT /examples/:id
func (h *ExampleHandler) UpdateExampleByID(c fiber.Ctx) error {
	// === 1. Bind & Validate Path Parameters ===
	params := new(UpdateExampleByIDParams)
	if err := c.Bind().URI(params); err != nil {
		appErr := custom_errors.ValidationError("ID ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", fiber.Map{"id": "must be a positive integer"})
		return response.Error(c, appErr)
	}
	// if validationDetails := validator.ValidateStruct(params); validationDetails != nil {
	// 	appErr := custom_errors.ValidationError("ID ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", validationDetails)
	// 	return response.Error(c, appErr)
	// }

	// === 2. Bind & Validate Request Body ===
	req := new(UpdateExampleRequest)
	if err := c.Bind().Body(&req); err != nil {
		// ‚ú® ‡∏î‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏£‡∏≠‡∏ö #1: ‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô Error ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ ‚ú®
		appErr := custom_errors.New(fiber.StatusBadRequest, custom_errors.ErrInvalidFormat, "Request body is not valid JSON", err.Error())
		return response.Error(c, appErr)
	}
	// if validationDetails := validator.ValidateStruct(req); validationDetails != nil {
	// 	appErr := custom_errors.ValidationError("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", validationDetails)
	// 	return response.Error(c, appErr)
	// }

	// === 3. Call Service (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á Translate ‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Update) ===
	// ‚ú® ‡∏î‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏£‡∏≠‡∏ö #2: Service ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ AppError ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‚ú®
	// ‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á ID ‡πÅ‡∏•‡∏∞ Request DTO ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡πâ Service ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
	updatedExample, serviceErr := h.service.UpdateExample(params.ID, req)
	if serviceErr != nil {
		// ‡∏ñ‡πâ‡∏≤ serviceErr ‡πÄ‡∏õ‡πá‡∏ô *custom_errors.AppError ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
		return response.Error(c, serviceErr.(*custom_errors.AppError))
	}

	// === 4. Send Success Response ===
	// ‚ú® ‡∏î‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏£‡∏≠‡∏ö #3: ‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô Success Response ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ ‚ú®
	return response.Success(c, fiber.StatusOK, updatedExample)
}

// DeleteExample handles DELETE /examples/:id
func (h *ExampleHandler) DeleteExampleByID(c fiber.Ctx) error {
	// ‚≠êÔ∏è ‡πÉ‡∏ä‡πâ Bind() ‡∏Å‡∏±‡∏ö DTO ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà
	params := new(DeleteExampleByIDParams)
	if err := c.Bind().URI(params); err != nil {
		appErr := custom_errors.ValidationError("ID ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", fiber.Map{"id": "must be a positive integer"})
		return response.Error(c, appErr)
	}
	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service
	if serviceErr := h.service.DeleteExample(params.ID); serviceErr != nil {
		return response.Error(c, serviceErr.(*custom_errors.AppError))
	}
	// ‚≠êÔ∏è ‡πÉ‡∏ä‡πâ response helper ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
	return response.NoContent(c)
}

// ListExamples handles GET /examples
func (h *ExampleHandler) ListExamples(c fiber.Ctx) error {
	limitStr := c.Query("limit", "10")
	offsetStr := c.Query("offset", "0")

	limit, err := strconv.Atoi(limitStr)
	if err != nil || limit <= 0 {
		limit = 10
	}

	offset, err := strconv.Atoi(offsetStr)
	if err != nil || offset < 0 {
		offset = 0
	}

	responses, err := h.service.ListExamples(limit, offset)
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": err.Error()})
	}

	return c.JSON(fiber.Map{
		"data":   responses,
		"limit":  limit,
		"offset": offset,
		"count":  len(responses),
	})
}
*/

// RegisterRoutes registers all routes for the example module
func (h *ExampleHandler) RegisterRoutes(router fiber.Router) {
	examples := router.Group("/examples")
	examples.Post("", h.CreateExample)
	// examples.Get("", h.ListExamples)
	// examples.Get("/:id", h.GetExampleByID)
	// examples.Put("/:id", h.UpdateExampleByID)
	// examples.Delete("/:id", h.DeleteExampleByID)
}

// ====================================================================================
// Private Helper Functions
// ====================================================================================

// toExampleResponse ‡∏Ñ‡∏∑‡∏≠ "‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢" ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á Domain -> Response DTO
// ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå example_handler.go ‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
func toExampleResponse(domain *ExampleDomain) *ExampleResponse {
	return &ExampleResponse{
		ID:        domain.ID,
		Name:      domain.Name,
		Email:     domain.Email,
		Status:    domain.Status,
		CreatedAt: domain.CreatedAt,
		UpdatedAt: domain.UpdatedAt,
	}
}

func toExampleResponseList(domains []ExampleDomain) []ExampleResponse {
	responses := make([]ExampleResponse, 0, len(domains))
	for _, domain := range domains {
		responses = append(responses, *toExampleResponse(&domain))
	}
	return responses
}
